name: "Release - Staging"

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: staging
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up SSH Agent
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_PRIVATE_KEY }}

      - name: Prepare EC2 Environment
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            # Install Docker and Docker Compose if not already installed
            if ! command -v docker &> /dev/null; then
              sudo yum update -y
              sudo yum install -y docker
              sudo service docker start
              sudo usermod -aG docker ec2-user
            fi

            if ! command -v docker-compose &> /dev/null; then
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi

            # Prepare the application directory with correct ownership
            sudo mkdir -p /home/${{ secrets.EC2_USER }}/app
            sudo chown -R ${{ secrets.EC2_USER }}:${{ secrets.EC2_USER }} /home/${{ secrets.EC2_USER }}/app
          EOF

      - name: Generate Backend .env File
        run: |
          mkdir -p backend
          echo "DB_URL=${{ secrets.DB_URL }}" > backend/.env
          echo "NODE_ENV=${{ secrets.NODE_ENV }}" >> backend/.env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> backend/.env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> backend/.env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> backend/.env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> backend/.env
          echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> backend/.env
          echo "ACCESS_TOKEN_SECRET=${{ secrets.ACCESS_TOKEN_SECRET }}" >> backend/.env
          echo "ACCESS_TOKEN_EXPIRATION=${{ secrets.ACCESS_TOKEN_EXPIRATION }}" >> backend/.env
          echo "REFRESH_TOKEN_SECRET=${{ secrets.REFRESH_TOKEN_SECRET }}" >> backend/.env
          echo "REFRESH_TOKEN_EXPIRATION=${{ secrets.REFRESH_TOKEN_EXPIRATION }}" >> backend/.env
          echo "MAIL_USER=${{ secrets.MAIL_USER }}" >> backend/.env
          echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> backend/.env
          echo "MAIL_SENDER=${{ secrets.MAIL_SENDER }}" >> backend/.env
          echo "BASE_URL=${{ vars.BASE_URL }}" >> backend/.env

      - name: Generate Frontend .env File
        run: |
          mkdir -p frontend
          echo "NEXT_PUBLIC_API_BASE_URL=${{ vars.NEXT_PUBLIC_API_BASE_URL }}" >> frontend/.env
          echo "NEXT_PUBLIC_BASE_URL=${{ vars.NEXT_PUBLIC_BASE_URL }}" >> frontend/.env
          echo "NEXT_PUBLIC_DOMAIN=${{ vars.NEXT_PUBLIC_DOMAIN }}" >> frontend/.env
          echo "NODE_ENV=${{ vars.NODE_ENV }}" >> frontend/.env

      - name: Upload Docker Compose and Application Files
        run: |
          tar -czf app.tar.gz docker-compose.yaml frontend backend
          scp -o StrictHostKeyChecking=no app.tar.gz ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/app/
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "tar -xzf /home/${{ secrets.EC2_USER }}/app/app.tar.gz -C /home/${{ secrets.EC2_USER }}/app && rm /home/${{ secrets.EC2_USER }}/app/app.tar.gz"

      - name: Deploy Application
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            cd /home/${{ secrets.EC2_USER }}/app
            docker-compose down || true
            docker-compose up -d --build
          EOF
